[{"C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\App.tsx":"1","C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\index.tsx":"2","C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\reportWebVitals.ts":"3","C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\fakeAPI\\projectList.js":"4","C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\components\\projects\\ProjectListView.tsx":"5","C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\components\\projects\\ProjectListContainer.tsx":"6"},{"size":310,"mtime":1609959915250,"results":"7","hashOfConfig":"8"},{"size":530,"mtime":1609788794223,"results":"9","hashOfConfig":"8"},{"size":425,"mtime":1609784261681,"results":"10","hashOfConfig":"8"},{"size":1998,"mtime":1609795150149,"results":"11","hashOfConfig":"8"},{"size":8521,"mtime":1609960001030,"results":"12","hashOfConfig":"8"},{"size":622,"mtime":1609874944751,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w27dib",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\App.tsx",[],"C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\index.tsx",[],"C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\reportWebVitals.ts",["28"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\fakeAPI\\projectList.js",[],"C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\components\\projects\\ProjectListView.tsx",["29","30","31"],"import { Hmac } from 'crypto';\r\nimport React from 'react';\r\n\r\n// Interface imports\r\nimport { Project } from '../../types';\r\n\r\ninterface ProjectListViewProps {\r\n    projects: Project[];\r\n}\r\n\r\ninterface ProjectFilterProps {\r\n    title: string;\r\n    handleTitleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    startDate: string;\r\n    handleStartDateChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    endDate: string;\r\n    handleEndDateChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    manager: string;\r\n    handleManagerChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nconst ProjectListView: React.FunctionComponent<ProjectListViewProps> = ({\r\n    projects,\r\n}: ProjectListViewProps): React.ReactElement => {\r\n    // state hooks for ProjectFilter component\r\n    const [filteredProjects, setFilteredProjects] = React.useState(projects);\r\n    const [title, setTitle] = React.useState('');\r\n    const [startDate, setStartDate] = React.useState('');\r\n    const [endDate, setEndDate] = React.useState('');\r\n    const [manager, setManager] = React.useState('');\r\n    const [viewingArchived, setViewingArchived] = React.useState(false); // TODO: implement this\r\n    // TODO: implement a reset button\r\n    // TODO: implement array of managers to pass down to filter prop\r\n\r\n    // Filters project array based on values from ProjectFilter element\r\n    const filterProjects = (projects: Project[]): Project[] => {\r\n        const filteredProjects: Project[] = [];\r\n        projects.forEach((project) => {\r\n            const titleMatches = project.title.toLowerCase().indexOf(title.toLowerCase()) !== -1;\r\n            const managerMatches =\r\n                manager === '' ? true : project.manager && project.manager.toLowerCase() === manager.toLowerCase();\r\n            const startDateMatches = new Date(project.created) >= new Date(startDate) || startDate === '';\r\n            const endDateMatches = new Date(project.created) <= new Date(endDate) || endDate === '';\r\n            const allFiltersMatch = titleMatches && managerMatches && startDateMatches && endDateMatches;\r\n            if (allFiltersMatch) {\r\n                filteredProjects.push(project);\r\n            }\r\n        });\r\n        return filteredProjects;\r\n    };\r\n\r\n    // calls filterProjects when state changes based on input values from ProjectFilter, then sets the newly filtered projects to state\r\n    React.useEffect(() => {\r\n        setFilteredProjects(filterProjects(projects));\r\n    }, [title, startDate, endDate, manager]);\r\n\r\n    // Callback functions passed down to ProjectFilter to handle input changes\r\n    const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const element = e.target as HTMLInputElement;\r\n        setTitle(element.value);\r\n    };\r\n\r\n    const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const element = e.target as HTMLInputElement;\r\n        setStartDate(element.value);\r\n    };\r\n\r\n    const handleEndDateChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const element = e.target as HTMLInputElement;\r\n        setEndDate(element.value);\r\n    };\r\n\r\n    const handleManagerChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        const element = e.target as HTMLSelectElement;\r\n        setManager(element.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mx-auto py-4 px-2 w-auto\">\r\n            <h1 className=\"text-5xl text-blue-800 text-left\">Projects</h1>\r\n            <ProjectFilter\r\n                title={title}\r\n                handleTitleChange={handleTitleChange}\r\n                startDate={startDate}\r\n                handleStartDateChange={handleStartDateChange}\r\n                endDate={endDate}\r\n                handleEndDateChange={handleEndDateChange}\r\n                manager={manager}\r\n                handleManagerChange={handleManagerChange}\r\n            />\r\n            <ProjectTable projects={filteredProjects} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProjectFilter: React.FunctionComponent<ProjectFilterProps> = ({\r\n    title,\r\n    handleTitleChange,\r\n    startDate,\r\n    handleStartDateChange,\r\n    endDate,\r\n    handleEndDateChange,\r\n    manager,\r\n    handleManagerChange,\r\n}: ProjectFilterProps): React.ReactElement => {\r\n    return (\r\n        <div className=\"container shadow bg-gray-200 mt-3\">\r\n            <div className=\"flex md:flex-row flex-col my-2\">\r\n                <div className=\"flex-auto text-left md:text-center\">\r\n                    <label className=\"text-2xl text-gray-800\" htmlFor=\"title\">\r\n                        Title:\r\n                    </label>\r\n                    <input\r\n                        className=\"mx-1 border rounded-md focus:ring-2 outline-none bg-gray-300 text-gray-700\"\r\n                        type=\"text\"\r\n                        id=\"title\"\r\n                        value={title}\r\n                        onChange={handleTitleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"flex-auto text-left md:text-center\">\r\n                    <label className=\"text-2xl text-gray-800\" htmlFor=\"start-date\">\r\n                        Start date:\r\n                    </label>\r\n                    <input\r\n                        className=\"mx-1 border rounded-md focus:ring-2 outline-none bg-gray-300 text-gray-700\"\r\n                        type=\"date\"\r\n                        id=\"start-date\"\r\n                        value={startDate}\r\n                        onChange={handleStartDateChange}\r\n                    />\r\n                </div>\r\n                <div className=\"flex-auto text-left md:text-center\">\r\n                    <label className=\"text-2xl text-gray-800\" htmlFor=\"end-date\">\r\n                        End date:\r\n                    </label>\r\n                    <input\r\n                        className=\"mx-1 border rounded-md focus:ring-2 outline-none bg-gray-300 text-gray-700\"\r\n                        type=\"date\"\r\n                        id=\"end-date\"\r\n                        value={endDate}\r\n                        onChange={handleEndDateChange}\r\n                    />\r\n                </div>\r\n                <div className=\"flex-auto text-left md:text-center\">\r\n                    <label className=\"text-2xl text-gray-800\" htmlFor=\"manager\">\r\n                        Manager:\r\n                    </label>\r\n                    <select\r\n                        name=\"manager\"\r\n                        id=\"manager\"\r\n                        className=\"mx-1 border rounded-md focus:ring-2 outline-none bg-gray-300 text-gray-700\"\r\n                        value={manager}\r\n                        onChange={handleManagerChange}\r\n                    >\r\n                        <option value=\"\"></option>\r\n                        <option value=\"monks\">Monks</option>\r\n                        <option value=\"manager-2\">Manager 2</option>\r\n                        <option value=\"manager-3\">Manager 3</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProjectTable: React.FunctionComponent<ProjectListViewProps> = ({\r\n    projects,\r\n}: ProjectListViewProps): React.ReactElement => {\r\n    const createHeader = (header: string): React.ReactElement => {\r\n        return <th className=\"border border-gray-300 px-1 py-2 bg-gray-200 text-gray-800\">{header}</th>;\r\n    };\r\n\r\n    const createCell = (value: string | number | null): React.ReactElement => {\r\n        return <td className=\"border border-gray-300 py-2 px-1 bg-gray-100 text-gray-500\">{value}</td>;\r\n    };\r\n\r\n    const headers: string[] = ['Title', 'Description', 'Manager', 'Open Tickets', 'Created'];\r\n\r\n    return (\r\n        <table className=\"shadow-lg mt-1 w-full text-left\">\r\n            <thead>\r\n                <tr>{headers.map((header: string) => createHeader(header))}</tr>\r\n            </thead>\r\n            <tbody>\r\n                {projects.map((project) => {\r\n                    return (\r\n                        <tr key={project.slug}>\r\n                            {createCell(project.title)}\r\n                            {createCell(project.description)}\r\n                            {createCell(project.manager)}\r\n                            {createCell(project.open_tickets)}\r\n                            {createCell(project.created)}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default ProjectListView;\r\n","C:\\Users\\thurm\\Documents\\my_apps\\bugtracker_react_v2\\bugtracker-react\\src\\components\\projects\\ProjectListContainer.tsx",["32"],{"ruleId":"33","severity":1,"message":"34","line":3,"column":25,"nodeType":"35","messageId":"36","endLine":3,"endColumn":57},{"ruleId":"37","severity":1,"message":"38","line":1,"column":10,"nodeType":"39","messageId":"40","endLine":1,"endColumn":14},{"ruleId":"37","severity":1,"message":"41","line":31,"column":12,"nodeType":"39","messageId":"40","endLine":31,"endColumn":27},{"ruleId":"37","severity":1,"message":"42","line":31,"column":29,"nodeType":"39","messageId":"40","endLine":31,"endColumn":47},{"ruleId":"37","severity":1,"message":"43","line":17,"column":22,"nodeType":"39","messageId":"40","endLine":17,"endColumn":33},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'Hmac' is defined but never used.","Identifier","unusedVar","'viewingArchived' is assigned a value but never used.","'setViewingArchived' is assigned a value but never used.","'setProjects' is assigned a value but never used."]